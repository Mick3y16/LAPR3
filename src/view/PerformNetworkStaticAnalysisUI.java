 package view;

import controller.PerformNetworkStaticAnalysisController;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.Simulator;

/**
 *
 * @author G11
 */
public class PerformNetworkStaticAnalysisUI extends javax.swing.JDialog {

    /**
     * The simulator that this UI will use.
     */
    private Simulator simulator;
    
    /**
     * The controller that will coordinate the use case.
     */
    private PerformNetworkStaticAnalysisController controller;
    
    /**
     * Creates new form PerformNetworkStaticAnalysisUI
     */
    public PerformNetworkStaticAnalysisUI(java.awt.Frame parent, boolean modal, Simulator simulator) {
        super(parent, modal);
        this.simulator = simulator;
        initComponents();
        try
        {
            this.controller=new PerformNetworkStaticAnalysisController(simulator);
            EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    DefaultListModel<String> model = new DefaultListModel();
                    vehiclesList.setModel(model);
                    List<String> vehicles = controller.getVehicleList();
                    for (String focus:vehicles)
                    {
                        model.addElement(focus);
                    }

                    DefaultComboBoxModel<String> bModel=new DefaultComboBoxModel();
                    DefaultComboBoxModel<String> bModel2=new DefaultComboBoxModel();
                    List<String> nodeList = controller.getNodesList();
                    for (String focus:nodeList)
                    {
                        bModel.addElement(focus);
                        bModel2.addElement(focus);
                    }
                    resultList.setCellRenderer(new ResultCellRenderer());
                    beginCombo.setModel(bModel);
                    endCombo.setModel(bModel2);
                    final SelectionAnimator sa = new SelectionAnimator(vehiclesList);
                    sa.selectEventBegin();
                    sa.setFlashingColor(SelectionAnimator.GREEN);
                    vehiclesList.addListSelectionListener(new ListSelectionListener()
                    {

                        @Override
                        public void valueChanged(ListSelectionEvent e)
                        {
                            if (!e.getValueIsAdjusting())
                            {
                                sa.resetColorValue();
                            }
                        }
                    });
                    final SelectionAnimator saResult = new SelectionAnimator(resultList);
                    saResult.selectEventBegin();
                    saResult.setFlashingColor(SelectionAnimator.YELLOW);
                    resultList.addListSelectionListener(new ListSelectionListener()
                    {

                        @Override
                        public void valueChanged(ListSelectionEvent e)
                        {
                            if (!e.getValueIsAdjusting())
                            {
                                saResult.resetColorValue();
                                showFastestButton.setEnabled(true);
                            }
                        }
                    });
                }
            });
        }
        catch (IllegalArgumentException e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage(),"ERROR",JOptionPane.ERROR_MESSAGE);
            EventQueue.invokeLater(new Runnable(){ @Override public void run() {dispose();}});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vehiclesList = new javax.swing.JList();
        fastestCheckBox = new javax.swing.JCheckBox();
        theoreticalCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        beginCombo = new javax.swing.JComboBox();
        endCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        calculateButton = new javax.swing.JButton();
        exportResults = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        showFastestButton = new javax.swing.JButton();
        realCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Vehicles");

        jScrollPane1.setViewportView(vehiclesList);

        fastestCheckBox.setForeground(new java.awt.Color(255, 51, 51));
        fastestCheckBox.setText("Fastest Path");

        theoreticalCheckBox.setForeground(new java.awt.Color(102, 102, 255));
        theoreticalCheckBox.setText("Theoretical Most Efficient Path");
        theoreticalCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                theoreticalCheckBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Begin node:");

        jLabel3.setText("End node:");

        jLabel4.setText("Result List:");

        resultList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(resultList);

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                calculateButtonActionPerformed(evt);
            }
        });

        exportResults.setText("Export Results");
        exportResults.setEnabled(false);
        exportResults.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exportResultsActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitButtonActionPerformed(evt);
            }
        });

        showFastestButton.setText("Show Results");
        showFastestButton.setEnabled(false);
        showFastestButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showFastestButtonActionPerformed(evt);
            }
        });

        realCheckBox.setForeground(new java.awt.Color(255, 153, 51));
        realCheckBox.setText("Real Most Efficient Path");
        realCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                realCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(181, 181, 181))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(beginCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(endCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel3)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(showFastestButton))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exportResults)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exitButton)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(realCheckBox)
                            .addComponent(theoreticalCheckBox)
                            .addComponent(fastestCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beginCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showFastestButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fastestCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(theoreticalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(realCheckBox)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateButton)
                    .addComponent(exportResults)
                    .addComponent(exitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void showFastestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFastestButtonActionPerformed
        // TODO add your handling code here:
        ColoredCellDisplay selectedItem = (ColoredCellDisplay) resultList.getSelectedValue();
        Color c = selectedItem.getDisplayBackColor();
        if (c.equals(fastestCheckBox.getForeground()))
        {
            new ResultEnergyPopUpUI(null, rootPaneCheckingEnabled, controller.getFastestResults().get(selectedItem.getDisplayText())).setVisible(true);
        }
        else if (c.equals(theoreticalCheckBox.getForeground()))
        {
            new ResultEnergyPopUpUI(null, rootPaneCheckingEnabled, controller.getTheoreticalEfficientResults().get(selectedItem.getDisplayText())).setVisible(true);
        }
        else if (c.equals(realCheckBox.getForeground()))
        {
            new ResultFuelPopUpUI(null, rootPaneCheckingEnabled, controller.getRealEfficientResults().get(selectedItem.getDisplayText())).setVisible(true);
        }
    }//GEN-LAST:event_showFastestButtonActionPerformed

    /**
     * Animates the color font of a selected cell for a target JList.
     */
    private class SelectionAnimator{
        
        private JList jlist;
        
        private boolean selected=true;
        
        private int selectionColor;
        
        private int val=0;
        
        public static final int RED=0,GREEN=1,BLUE=2,YELLOW=3,PURPLE=4;
        
        public SelectionAnimator(JList list)
        {
            jlist=list;
            Timer timer = new Timer(20,new ActionListener() {
                
                int increment=1;
                
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    if (selected)
                    {
                        if (increment==1)
                        {
                            val+=3;
                            if (val>=255)
                            {
                                increment=-1;
                                val=255;
                            }
                        }
                        else
                        {
                            val-=3;
                            if (val<=0)
                            {
                                increment=1;
                                val=0;
                            }
                        }
                        switch (selectionColor)
                        {
                            case RED:
                                jlist.setSelectionForeground(new Color(val,0,0));
                                break;
                            case BLUE:
                                jlist.setSelectionForeground(new Color(0,0,val));
                                break;
                            case GREEN:
                                jlist.setSelectionForeground(new Color(0,val,0));
                                break;
                            case YELLOW:
                                jlist.setSelectionForeground(new Color(val,val,0));
                                break;
                                
                            default:
                                
                                break;
                        }
                    }
                }
            });
            timer.setRepeats(true);
            timer.start();
        }
        
        /**
         * Resets the flashing color value.
         */
        public void resetColorValue()
        {
            val=0;
        }
        
        /**
         * Changes the flashing color value.
         * @param value (int) The flashing value. Can be one of the types defined in SelectionAnimator.
         */
        public void setFlashingColor(int value)
        {
            selectionColor=value;
        }
        
        public void selectEventBegin()
        {
            selected=true;
        }
    }
    
    private void exportResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportResultsActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Hyper Text Markup Language","html"));
        
        int result = chooser.showSaveDialog(rootPane);
        switch (result)
        {
            case JFileChooser.APPROVE_OPTION:
                List<String> vehicles = new ArrayList();
                for (int i=0;i<resultList.getModel().getSize();i++)
                {
                    ColoredCellDisplay element = (ColoredCellDisplay) resultList.getModel().getElementAt(i);
                    if (!vehicles.contains(element.getDisplayText()))
                    {
                        vehicles.add(element.getDisplayText());
                    }
                }
                
                JList<String> popupList = new JList(vehicles.toArray());
                JOptionPane.showMessageDialog(null, popupList, "Vehicle Selection", JOptionPane.PLAIN_MESSAGE);
                
                File file = chooser.getSelectedFile();
                if (file.getName()!=null && !popupList.getSelectedValuesList().isEmpty())
                {
                    controller.exportHTML(popupList.getSelectedValuesList(), file.getAbsolutePath());
                    Window.displayGenericMessage("Resutls exported successfully to '"+file.getAbsolutePath()+"'");
                }
                else
                {
                    Window.displayError("You must select a file!");
                }
                break;
        }
    }//GEN-LAST:event_exportResultsActionPerformed

    private void theoreticalCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_theoreticalCheckBoxActionPerformed
    {//GEN-HEADEREND:event_theoreticalCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_theoreticalCheckBoxActionPerformed

    private void realCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_realCheckBoxActionPerformed
    {//GEN-HEADEREND:event_realCheckBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_realCheckBoxActionPerformed

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_calculateButtonActionPerformed
    {//GEN-HEADEREND:event_calculateButtonActionPerformed
        // TODO add your handling code here:
        controller.setBeginNode((String)beginCombo.getSelectedItem());
        controller.setEndNode((String)endCombo.getSelectedItem());
        controller.calculate(vehiclesList.getSelectedValuesList(), fastestCheckBox.isSelected(), theoreticalCheckBox.isSelected(), realCheckBox.isSelected());
        DefaultListModel<ColoredCellDisplay> model = new DefaultListModel();
        Iterator<String> it1 = controller.getFastestResults().keySet().iterator();
        Iterator<String> it2 = controller.getTheoreticalEfficientResults().keySet().iterator();
        Iterator<String> it3 = controller.getRealEfficientResults().keySet().iterator();
        
        while (it1.hasNext() || it2.hasNext() || it3.hasNext())
        {
            if (it1.hasNext())
            {
                ColoredCellDisplay ccd = new ColoredCellDisplay();
                ccd.setDisplayBackColor(new Color(255,51,51));
                ccd.setDisplayText(it1.next());
                model.addElement(ccd);
            }
            if (it2.hasNext())
            {
                ColoredCellDisplay ccd = new ColoredCellDisplay();
                ccd.setDisplayBackColor(new Color(102,102,255));
                ccd.setDisplayText(it2.next());
                model.addElement(ccd);
            }
            if (it3.hasNext())
            {
                ColoredCellDisplay ccd = new ColoredCellDisplay();
                ccd.setDisplayBackColor(new Color(255,153,51));
                ccd.setDisplayText(it3.next());
                model.addElement(ccd);
            }
        }
        resultList.setModel(model);
        exportResults.setEnabled(true);
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitButtonActionPerformed
    {//GEN-HEADEREND:event_exitButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox beginCombo;
    private javax.swing.JButton calculateButton;
    private javax.swing.JComboBox endCombo;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exportResults;
    private javax.swing.JCheckBox fastestCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox realCheckBox;
    private javax.swing.JList resultList;
    private javax.swing.JButton showFastestButton;
    private javax.swing.JCheckBox theoreticalCheckBox;
    private javax.swing.JList vehiclesList;
    // End of variables declaration//GEN-END:variables
}
