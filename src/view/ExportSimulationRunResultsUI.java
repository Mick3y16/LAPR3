/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ExportSimulationRunResultsController;
import java.awt.EventQueue;
import java.io.File;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import model.Simulator;

/**
 * Exports simulation run results.
 * @author G11
 */
public class ExportSimulationRunResultsUI extends javax.swing.JDialog {

    /**
     * Controller that coordinates the use case.
     */
    private ExportSimulationRunResultsController controller;
    
    /**
     * Creates new form ExportSimulationRunResultsUI
     */
    public ExportSimulationRunResultsUI(java.awt.Frame parent, boolean modal,Simulator sim) {
        super(parent, modal);
        initComponents();
        try
        {
            controller = new ExportSimulationRunResultsController(sim);
            EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    DefaultListModel<String> model = new DefaultListModel();
                    List<String> names = controller.getRunList();
                    for (String element:names)
                    {
                        model.addElement(element);
                    }
                    runList.setModel(model);
                }
            });
        }
        catch (IllegalArgumentException e)
        {
            Window.displayError(e.getMessage());
            EventQueue.invokeLater(new Runnable(){@Override public void run(){dispose();}});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        runList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        resultBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        resultsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(runList);

        jLabel1.setText("List of Simulation Runs:");

        resultBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Average Energy Each Pattern", "Average Energy Each Pattern Segment", "Average Energy & Time Target Pattern" }));

        jLabel2.setText("Result Type:");

        resultsButton.setText("Export Results");
        resultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(resultBox, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(resultsButton))
                        .addGap(0, 73, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(resultsButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsButtonActionPerformed
        // TODO add your handling code here:
        int resultType = resultBox.getSelectedIndex();
        boolean keepGoing=true;
        String option=null;
        if (resultType==2)
        {
            String[] data = (String[])controller.getVehicleList().toArray();
            
            option = (String) JOptionPane.showInputDialog(null,"Select a vehicle pattern:","Vehicle Selection",
                    JOptionPane.QUESTION_MESSAGE,null,data,data[0]);
            if (!((option != null) && (option.length() > 0))) 
            {
                keepGoing=false;
            }
        }
        
        int index = runList.getSelectedIndex();
        
        
        //PEDRINHO DO YOUR MAGIC.
        if (keepGoing)
        {
            JFileChooser chooser = new JFileChooser();
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.addChoosableFileFilter(new FileNameExtensionFilter("Hyper Text Markup Language","html"));
            int result = chooser.showSaveDialog(rootPane);
            switch (result)
            {
                case JFileChooser.APPROVE_OPTION:
                    File file = chooser.getSelectedFile();
                    switch (resultType)
                    {
                        case 0:
                            //controller.getAverageEnergyConsumptionAll(index);
                            controller.exportAverageEnergyConsumptionAll(file.getAbsolutePath(), index);
                            break;
                        case 1:
                            //controller.getAverageEnergyConsumptionAllSegments(index);
                            controller.exportAverageEnergyConsumptionAllSegments(file.getAbsolutePath(), index);
                            break;
                        case 2:
                            //controller.getAverageEnergyConsumptionAll(index, option);
                            controller.exportAverageEnergyTimeConsumptionVehicleSegments(file.getAbsolutePath(), option, index);
                            break;
                    }
                    //Muda a mensagem se achares que deves.
                    Window.displayGenericMessage("Successfully exported results to "+file.getAbsolutePath());
                    break;
            }
        }
    }//GEN-LAST:event_resultsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox resultBox;
    private javax.swing.JButton resultsButton;
    private javax.swing.JList runList;
    // End of variables declaration//GEN-END:variables
}
