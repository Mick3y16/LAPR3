  CREATE TABLE ROAD_TYPOLOGY 
   (	ROAD_TYPE_ID NUMBER(*,0), 
	TYPOLOGY VARCHAR2(32 BYTE) NOT NULL,
	CONSTRAINT PK_ROAD_TYPE PRIMARY KEY (ROAD_TYPE_ID) 
   );  
   
  CREATE TABLE  PROJECT 
   (	PROJECT_ID NUMBER(*,0), 
	NAME VARCHAR2(32 BYTE) NOT NULL UNIQUE, 
	DESCRIPTION VARCHAR2(64 BYTE) NOT NULL,
	CONSTRAINT PK_PROJECT PRIMARY KEY (PROJECT_ID)
   );
   
     CREATE TABLE  JUNCTION 
   (	JUNCTION_ID NUMBER(*,0), 
	PROJECT_ID NUMBER(*,0) NOT NULL, 
	NAME VARCHAR2(32 BYTE) NOT NULL,
	CONSTRAINT PK_JUNCTION PRIMARY KEY (JUNCTION_ID),
	CONSTRAINT FK_JUNCTION_PROJECT_ID FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON DELETE CASCADE,
	CONSTRAINT UK_NAME_PROJ UNIQUE (PROJECT_ID, NAME)
   );
   
     CREATE TABLE  SECTION 
   (	SECTION_ID NUMBER(*,0), 
	PROJECT_ID NUMBER(*,0) NOT NULL, 
	ROAD_NAME VARCHAR2(32 BYTE) NOT NULL, 
	ROAD_TYPOLOGY_ID NUMBER(*,0) NOT NULL, 
	TOLL NUMBER(5,2) NOT NULL, 
	WIND_SPEED NUMBER(7,4) NOT NULL, 
	WIND_ORIENTATION NUMBER(7,4) NOT NULL,
	CONSTRAINT PK_SECTION PRIMARY KEY (SECTION_ID),
	CONSTRAINT FK_SECTION_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON DELETE CASCADE,
	CONSTRAINT FK_SECTION_RT_ID FOREIGN KEY (ROAD_TYPOLOGY_ID) REFERENCES ROAD_TYPOLOGY (ROAD_TYPE_ID),
	CONSTRAINT UK_ROAD_PROJ UNIQUE (PROJECT_ID, ROAD_NAME),
	CONSTRAINT CK_SECTION_TOLL CHECK (toll >= 0),
	CONSTRAINT CK_SECTION_WIND_SPEED CHECK (wind_speed >= 0),
	CONSTRAINT CK_SECTION_WIND_ORIEN CHECK (WIND_ORIENTATION BETWEEN -180 AND 180)
   );
   
     CREATE TABLE  SEGMENT 
   (	SEGMENT_ID NUMBER(*,0), 
	SECTION_ID NUMBER(*,0) NOT NULL, 
	S_INDEX NUMBER(2,0) NOT NULL, 
	INITIAL_HEIGHT NUMBER(8,4) NOT NULL, 
	ANGLE NUMBER(6,4) NOT NULL, 
	S_LENGTH NUMBER(10,4) NOT NULL, 
	MAXIMUM_VELOCITY NUMBER(6,4) NOT NULL, 
	MINIMUM_VELOCITY NUMBER(6,4) NOT NULL, 
	MAXIMUM_NUMBER_VEHICLES NUMBER(4,0) NOT NULL,
	CONSTRAINT PK_SEGMENT PRIMARY KEY (SEGMENT_ID),
	CONSTRAINT FK_SEGMENT_SECTION_ID FOREIGN KEY (SECTION_ID) REFERENCES SECTION (SECTION_ID) ON DELETE CASCADE,
	CONSTRAINT UK_SEGMENT UNIQUE (SECTION_ID, S_INDEX),
	CONSTRAINT CK_SEGMENT_S_INDEX CHECK (S_INDEX >= 0),
	CONSTRAINT CK_SEGMENT_ANGLE CHECK (ANGLE BETWEEN -45 AND 45),
	CONSTRAINT CK_SEGMENT_S_LENGTH CHECK (S_LENGTH > 0),
	CONSTRAINT CK_SEGMENT_MAXIMUM_VELOCITY CHECK (MAXIMUM_VELOCITY >= 0),
	CONSTRAINT CK_SEGMENT_MINIMUM_VELOCITY CHECK (MINIMUM_VELOCITY >= 0),
	CONSTRAINT CK_SEGMENT_MAX_NUMBER_VEHICLES CHECK (MAXIMUM_NUMBER_VEHICLES > 0),
	CONSTRAINT CK_SEGMENT_VELOCITY CHECK (MINIMUM_VELOCITY < MAXIMUM_VELOCITY)
   );
   
  CREATE TABLE  SIMULATION 
   (	SIMULATION_ID NUMBER(*,0), 
	PROJ_ID NUMBER(*,0) NOT NULL, 
	NAME VARCHAR2(32 BYTE) NOT NULL UNIQUE, 
	DESCRIPTION VARCHAR2(64 BYTE) NOT NULL,
	CONSTRAINT PK_SIMULATION PRIMARY KEY (SIMULATION_ID),
	CONSTRAINT FK_SIMULATION_PROJ_ID FOREIGN KEY (PROJ_ID) REFERENCES PROJECT (PROJECT_ID) ON DELETE CASCADE
   );
   
     CREATE TABLE  VEHICLE 
   (	VEHICLE_ID NUMBER(*,0), 
	PROJECT_ID NUMBER(*,0) NOT NULL, 
	NAME VARCHAR2(32 BYTE) NOT NULL, 
	DESCRIPTION VARCHAR2(64 BYTE) NOT NULL, 
	TYPE VARCHAR2(32 BYTE) NOT NULL, 
	FUEL VARCHAR2(16 BYTE) NOT NULL, 
	MASS NUMBER(8,4) NOT NULL, 
	LOAD NUMBER(8,4) NOT NULL, 
	DRAG_COEFFICIENT NUMBER(8,4) NOT NULL, 
	FRONTAL_AREA NUMBER(8,4) NOT NULL, 
	RRC NUMBER(8,4) NOT NULL, 
	WHEEL_SIZE NUMBER(8,4) NOT NULL, 
	MOTORIZATION VARCHAR2(20 BYTE) NOT NULL,
	CONSTRAINT PK_VEHICLE PRIMARY KEY (VEHICLE_ID),
	CONSTRAINT UK_VEHICLE UNIQUE (PROJECT_ID, NAME),
	CONSTRAINT FK_VEHICLE_PROJ_ID FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON DELETE CASCADE,
	CONSTRAINT CK_VEHICLE_MASS CHECK (mass > 0),
	CONSTRAINT CK_VEHICLE_LOAD CHECK (load >= 0),
	CONSTRAINT CK_VEHICLE_DRAG_COEFFICIENT CHECK (drag_coefficient > 0),
	CONSTRAINT CK_VEHICLE_FRONTAL_AREA CHECK (frontal_area > 0),
	CONSTRAINT CK_VEHICLE_RRC CHECK (rrc >= 0),
	CONSTRAINT CK_VEHICLE_WHEEL_SIZE CHECK (wheel_size > 0)
   );
   
   
  CREATE TABLE  VEHICLE_COMBUSTION 
   (	VEHICLE_ID NUMBER(*,0) NOT NULL, 
	RPM_LOW NUMBER(*,0) NOT NULL, 
	RPM_HIGH NUMBER(*,0) NOT NULL, 
	FINAL_DRIVE NUMBER(4,2) NOT NULL,
	CONSTRAINT PK_VC_VEHICLE PRIMARY KEY (VEHICLE_ID),
	CONSTRAINT FK_VC_VEHICLE_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID) ON DELETE CASCADE,
	CONSTRAINT CK_RPM_LOW CHECK (RPM_LOW >=0),
	CONSTRAINT CK_COMBUSTION_RPM CHECK (RPM_LOW < RPM_HIGH),
	CONSTRAINT CK_FINAL_DRIVE CHECK (FINAL_DRIVE > 0)
   );
   
  CREATE TABLE  VEHICLE_ELECTRIC 
   (	VEHICLE_ID NUMBER(*,0) NOT NULL, 
	RPM_LOW NUMBER(*,0) NOT NULL, 
	RPM_HIGH NUMBER(*,0) NOT NULL, 
	ENERGY_REGENERATION_RATIO NUMBER(3,2) NOT NULL, 
	FINAL_DRIVE NUMBER(4,2) NOT NULL,
	CONSTRAINT PK_VC_VEHICLE1 PRIMARY KEY (VEHICLE_ID),
	CONSTRAINT FK_VEHICLE_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID) ON DELETE CASCADE,
	CONSTRAINT CK_ENERGY_RATIO CHECK (ENERGY_REGENERATION_RATIO BETWEEN 0 AND 1),
	CONSTRAINT CK_ELECTRIC_RPM_LOW CHECK (RPM_LOW >=0),
	CONSTRAINT CK_ELECTRIC_RPM CHECK (RPM_LOW < RPM_HIGH),
	CONSTRAINT CK_FINAL_DRIVE1 CHECK (FINAL_DRIVE > 0)
   );
   
  CREATE TABLE  VEHICLE_GEAR_BOX 
   (	GEAR_ID NUMBER(*,0), 
	VEHICLE_ID NUMBER(*,0) NOT NULL, 
	GEAR_NUMBER NUMBER(*,0) NOT NULL, 
	RATIO NUMBER(4,2) NOT NULL,
	CONSTRAINT PK_VEHICLE_GEAR_BOX PRIMARY KEY (GEAR_ID),
	CONSTRAINT FK_VGB_VEHICLE_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID) ON DELETE CASCADE,
	CONSTRAINT UK_VGB UNIQUE (GEAR_ID, VEHICLE_ID),
	CONSTRAINT CK_RATIO CHECK (RATIO > 0)
   );

  CREATE TABLE  ACC_PEDAL_COMBUSTION 
   (	ACC_PEDAL_ID NUMBER(*,0), 
	VEHICLE_ID NUMBER(*,0) NOT NULL, 
	ACCEL_PEDAL_PERCENTAGE NUMBER(*,0)  NOT NULL,
	CONSTRAINT PK_APC PRIMARY KEY (ACC_PEDAL_ID),
	CONSTRAINT FK_APC_VEHICLE_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID) ON DELETE CASCADE
   );
  
  CREATE TABLE  REGIME 
   (	REGIME_ID NUMBER(*,0), 
	TORQUE NUMBER(*,0) NOT NULL, 
	RPM_LOW NUMBER(*,0) NOT NULL, 
	RPM_HIGH NUMBER(*,0) NOT NULL, 
	SFC NUMBER(6,2) NOT NULL, 
	ACC_PEDAL_ID NUMBER(*,0) NOT NULL,
	CONSTRAINT PK_REGIME PRIMARY KEY (REGIME_ID),
	CONSTRAINT FK_REGIME_AP_ID FOREIGN KEY (ACC_PEDAL_ID) REFERENCES ACC_PEDAL_COMBUSTION (ACC_PEDAL_ID) ON DELETE CASCADE,
	CONSTRAINT CK_TORQUE CHECK (TORQUE > 0),
	CONSTRAINT CK_LOW_ZERO CHECK (RPM_LOW>=0),
	CONSTRAINT CK_SFC CHECK (SFC >= 0),
	CONSTRAINT CK_HIGH_LOW CHECK (RPM_HIGH>RPM_LOW)
   );
	  
  CREATE TABLE  SIMULATION_TRAFFIC 
   (	SIMULATION_TRAFFIC_ID 
   NUMBER(*,0), 
	SIMULATION_ID NUMBER(*,0) NOT NULL, 
	VEHICLE_ID NUMBER(*,0) NOT NULL, 
	ARRIVAL_RATE NUMBER(*,0) NOT NULL, 
	BEGIN_NODE NUMBER(*,0) NOT NULL, 
	END_NODE NUMBER(*,0) NOT NULL,
	CONSTRAINT PK_SIMULATION_TRAFFIC PRIMARY KEY (SIMULATION_TRAFFIC_ID),
	CONSTRAINT FK_SIMUL_TRAFFIC_SIMULATION_ID FOREIGN KEY (SIMULATION_ID) REFERENCES SIMULATION (SIMULATION_ID) ON DELETE CASCADE,
	CONSTRAINT FK_SIMUL_TRAFFIC_VEHICLE_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID),
	CONSTRAINT FK_SIMUL_TRAFFIC_BEGIN_NODE FOREIGN KEY (BEGIN_NODE) REFERENCES JUNCTION (JUNCTION_ID),
	CONSTRAINT FK_SIMUL_TRAFFIC_END_NODE FOREIGN KEY (END_NODE) REFERENCES JUNCTION (JUNCTION_ID),
	CONSTRAINT CK_ARRIVAL_RATE CHECK (ARRIVAL_RATE > 0),
	CONSTRAINT CK_NODES CHECK (BEGIN_NODE != END_NODE),
  CONSTRAINT UK_SIMULATION_TRAFFIC UNIQUE (SIMULATION_ID, VEHICLE_ID, BEGIN_NODE, END_NODE)
   );
   
     CREATE TABLE SIM_ALGORITHM (
    SIM_ALGORITHM_ID INTEGER,
    NAME VARCHAR(32) NOT NULL,
    CONSTRAINT PK_SIM_ALGORITHM_ID PRIMARY KEY (SIM_ALGORITHM_ID));
    
 CREATE TABLE SIMULATION_RUN (
  SIMULATION_RUN_ID INTEGER,
  SIMULATION_ID INTEGER NOT NULL,
  NAME VARCHAR2(32) NOT NULL,
  START_TIME INTEGER NOT NULL,
  END_TIME INTEGER NOT NULL,
  TIME_STEP INTEGER NOT NULL,
  ALGORITHM_ID INTEGER NOT NULL,
  CONSTRAINT PK_SIMULATION_RUN PRIMARY KEY (SIMULATION_RUN_ID),
  CONSTRAINT FK_SIMULATION_ID FOREIGN KEY (SIMULATION_ID) REFERENCES SIMULATION (SIMULATION_ID) ON DELETE CASCADE,
  CONSTRAINT FK_ALGORITHM_ID FOREIGN KEY (ALGORITHM_ID) REFERENCES SIM_ALGORITHM (SIM_ALGORITHM_ID),
  CONSTRAINT UK_NAME_SIM UNIQUE (SIMULATION_ID, NAME));
    
CREATE TABLE SIM_RUN_VEHICLE(
  SIM_RUN_VEHICLE_ID INTEGER,
  SIM_RUN_ID INTEGER NOT NULL,
  SIMULATION_TRAFFIC_ID INTEGER NOT NULL,
  INSTANT_DROPPED_OUT INTEGER, 
  INSTANCE_ID INTEGER NOT NULL,
  CONSTRAINT PK_SIM_RUN_VEH_ID PRIMARY KEY (SIM_RUN_VEHICLE_ID),
  CONSTRAINT FK_SIM_RUN_ID FOREIGN KEY (SIM_RUN_ID) REFERENCES SIMULATION_RUN (SIMULATION_RUN_ID) ON DELETE CASCADE,
  CONSTRAINT FK_SIM_TRA_ID FOREIGN KEY (SIMULATION_TRAFFIC_ID) REFERENCES SIMULATION_TRAFFIC (SIMULATION_TRAFFIC_ID) ON DELETE CASCADE,
  CONSTRAINT UK_RUN_VEHICLE UNIQUE (SIM_RUN_ID, SIMULATION_TRAFFIC_ID, INSTANCE_ID));
  
CREATE TABLE SIM_RUN_VEHICLE_RESULT (
  SIM_RUN_VEHICLE_RESULT_ID INTEGER,
  SIM_VEHICLE_ID INTEGER NOT NULL,
  INSTANT_IN INTEGER NOT NULL,
  INSTANT_OUT INTEGER NOT NULL,
  ENERGY INTEGER NOT NULL,
  SEGMENT_ID INTEGER NOT NULL,
  CONSTRAINT PK_SIM_RUN_VEH_RESULT_ID PRIMARY KEY (SIM_RUN_VEHICLE_RESULT_ID),
  CONSTRAINT FK_SIM_VEHICLE_ID FOREIGN KEY (SIM_VEHICLE_ID) REFERENCES SIM_RUN_VEHICLE (SIM_RUN_VEHICLE_ID) ON DELETE CASCADE,
  CONSTRAINT FK_SEGMENT_ID FOREIGN KEY (SEGMENT_ID) REFERENCES SEGMENT (SEGMENT_ID));

CREATE TABLE VEHICLE_VELOCITIES(
  VEHICLE_VELOCITIES_ID INTEGER,
  VEHICLE_ID INTEGER NOT NULL,
  ROAD_TYPOLOGY_ID INTEGER NOT NULL,
  VELOCITY NUMBER(6,4) NOT NULL,
  CONSTRAINT PK_VEHICLE_VEL_ID PRIMARY KEY (VEHICLE_VELOCITIES_ID),
  CONSTRAINT FK_VEHICLE_VELOCITIES_ID FOREIGN KEY (VEHICLE_ID) REFERENCES VEHICLE (VEHICLE_ID) ON DELETE CASCADE,
  CONSTRAINT FK_ROAD_TYPOLOGY_ID FOREIGN KEY (ROAD_TYPOLOGY_ID) REFERENCES ROAD_TYPOLOGY (ROAD_TYPE_ID),
  CONSTRAINT UK_VEHICLE_VEL UNIQUE (VEHICLE_ID, ROAD_TYPOLOGY_ID),
  CONSTRAINT CK_VELOCITY CHECK (VELOCITY >= 0)
);

  CREATE OR REPLACE TRIGGER VALIDATEREGIME 
after insert or update
on regime
declare
  errorsFound integer := 0;
  errors EXCEPTION; 
begin

  select COUNT(*) INTO errorsFound
  from regime a, regime b, vehicle_combustion vc, acc_pedal_combustion apd
  where ((a.rpm_low between b.rpm_low and b.rpm_high) or (a.rpm_high between b.rpm_low and b.rpm_high))
  and ((a.acc_pedal_id = apd.acc_pedal_id and apd.vehicle_id = vc.vehicle_id) and (b.acc_pedal_id = apd.acc_pedal_id and apd.vehicle_id = vc.vehicle_id))
  and ((a.rpm_low > vc.rpm_low and b.rpm_low > vc.rpm_low) and (a.rpm_high < vc.rpm_high and b.rpm_high < vc.rpm_high))
  and a.regime_id != b.regime_id;
  
  if errorsFound != 0 then
    RAISE_APPLICATION_ERROR (-20001,'ERROR REGIME');
  end if;
end;